{"version":3,"sources":["components/Article.js","components/News.js","components/Add.js","App.js","serviceWorker.js","index.js"],"names":["Article","state","visible","moreHandler","e","preventDefault","setState","this","props","data","author","text","bigText","className","onClick","href","React","Component","News","clicks","renderNews","newsTemplate","length","map","item","key","id","Add","name","disabled","agree","validate","trim","agreeHandle","currentTarget","checked","clickHandle","onAddNews","Date","changeHandle","value","defaultValue","placeholder","onChange","ref","input","type","App","news","isLoading","handleAddNews","nextNews","Array","isArray","fetch","then","response","json","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.37438fda.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass Article extends React.Component {\n    state = {\n        visible:false\n    }\n    moreHandler = (e) => {\n        e.preventDefault()\n        this.setState({visible:!this.state.visible})\n    }\n    render() {\n        const {author,text,bigText} = this.props.data\n        const {visible} = this.state\n        return(\n            <div className=\"news-article\">\n            <p>Author: {author}</p>\n        <p>Text {text}</p>\n        {\n            !visible && <a onClick={this.moreHandler} href=\"#\" className=\"spoiler\">more</a>}\n            { visible && <p>{bigText}</p>\n            }\n            {visible && <a onClick={this.moreHandler} href=\"#\" className=\"spoiler\">less</a>}\n\n\n                </div>\n            )\n    }\n}\nArticle.propTypes = {\n    data: PropTypes.shape ({\n        author: PropTypes.string.isRequired,\n        text: PropTypes.string.isRequired,\n    })\n}\n\n\n\nexport {Article}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Article} from \"./Article\"\n\n\nclass News extends React.Component {\n    state = {\n        clicks:0\n    }\n\n    renderNews = () => {\n        const {data} = this.props\n        let newsTemplate\n        if (data.length) {\n            newsTemplate = this.props.data.map(function (item) {\n                    return <Article key = {item.id} data={item}/>\n                }\n            )\n        } else {\n            newsTemplate = <p>No News</p>\n        }\n\n        return (\n            <div>\n            {newsTemplate}\n            </div>\n    )\n    }\n\n    render() {\n        const {data} = this.props\n        return (\n            <div className=\"news\">\n            {this.renderNews()}\n            <p className={data.length>0 ? \"news-count\" : \"none\"}>Total news: {data.length}</p>\n\n        </div>\n    )\n\n    }\n\n}\nNews.propTypes = {\n    data: PropTypes.array.isRequired}\n\n    export {News}","import React from 'react'\n\nclass Add extends React.Component {\n    state = {\n        name: \"\",\n        text: \"\",\n        disabled: true,\n        agree: false,\n        bigText: \"\"\n    }\n    validate = (e) => {\n        const {name,text,agree} = this.state\n\n        if (name.trim()&& text.trim() && agree){\n\n            return false}\n        else\n            return true\n    }\n\n    agreeHandle = (e) => {\n        this.setState({agree: e.currentTarget.checked})\n    }\n    clickHandle = (e) => {\n        e.preventDefault()\n        const {name,text,bigText} = this.state\n        this.props.onAddNews({author:name,id:+new Date(),text,bigText})\n    }\n    changeHandle = (e) => {\n        const {id,value} = e.currentTarget\n        this.setState({\n            [id]: value,\n\n        })\n    }\n    render() {\n        return(\n            <form className=\"add\">\n\n            <input id=\"name\" defaultValue=\"\" placeholder=\"Enter name\" onChange={this.changeHandle} ref={this.input} type=\"text\"/>\n            <textarea id=\"text\" defaultValue=\"\" placeholder=\"Enter Text\" onChange={this.changeHandle} type=\"text\"></textarea>\n            <textarea id=\"bigText\" defaultValue=\"\" placeholder=\"Enter More text\" onChange={this.changeHandle} type=\"text\"></textarea>\n            <label>\n            <input onClick={this.agreeHandle} type=\"checkbox\" value={this.state.text}/> I agree with Terms and Conditions\n        </label>\n        <button className=\"add-button\" onClick={this.clickHandle} disabled={this.validate(this)}>Add post</button>\n        </form>\n    )\n    }\n}\nexport {Add};","import React from 'react';\nimport './App.css';\nimport {News} from \"./components/News\"\nimport {Add} from \"./components/Add\"\n\n\n\n\nclass App extends React.Component {\n    state = {\n        news: null,\n        isLoading: false\n    }\n    handleAddNews = (data) => {\n        const nextNews = [data,...this.state.news]\n        this.setState({news:nextNews})\n\n    }\n    render() {\n        const {news,isLoading} = this.state\n        return (\n            <div>\n                <Add onAddNews = {this.handleAddNews}/>\n                {isLoading && <p>Loading...</p>}\n                {Array.isArray(news) && <News data = {news}/>}\n\n        </div>\n    )\n    }\n  componentDidMount() {\n        this.setState({isLoading:true})\n        fetch('http://localhost:3000/data/newsData.json')\n            .then(response => {\n                return response.json()\n            })\n            .then(data => {\n                this.setState({isLoading:false, news:data})\n            })\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}